# -*- coding: utf-8 -*-
"""Задание_1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W1TZ90CupTQZa-NTO83cY70a_JkT9JOp

- [JSON, GeoJSON](https://colab.research.google.com/drive/1Qj-iH5AzezNw-Z1Z_Q-L46e2C4CvdkY-?usp=sharing)
- [pandas, geopandas](https://colab.research.google.com/drive/188D1gLMxViVjkwX3RG0QWZaeNZkxPTwj?usp=sharing)

# OSM. Работа с геометриями

Устанавливаем зависимости для работы
"""

!pip install numpy==1.22.0  # какие-то проблемы с зависимостямя
!pip install geopandas mapclassify  # mapclassify для визуализации
!pip install keplergl  # для визуализации
!pip install osmnx  # устанавливаем модуль osmnx

from keplergl import KeplerGl # для визуализации данных
import osmnx as ox # для выгруза открытыз данных из osm
# для отображения виджета KeplerGL сразу в colab
from google.colab import output
output.enable_custom_widget_manager()

# выгрузка границ города
CITY_NAME = 'Томск'
city = ox.geocode_to_gdf(CITY_NAME)
city.explore (tiles = "CartoDB positron")

# выгрузим границы районов города
tags = {'admin_level': '9'} # номер тега равен 9 для районов города
boundaries = ox.geometries_from_polygon(city.unary_union, tags)
boundaries.reset_index(inplace=True)
boundaries.head()
# просмотрев значения видим пропущенные значения в поле name

# просмотрим информацию по датафрейму
boundaries.info()

# Удалим пропущенные значения
boundaries.dropna(subset=['name'], inplace=True)
boundaries.head()

# Просмотрим на именай районов
boundaries.name.to_list()

# Оставим строки в которых есть название "район"
boundaries = boundaries[boundaries.name.str.contains('район')]

# Визуализируем полученные данные
boundaries.explore(tiles="CartoDB positron")

# Оставим только один район
DISTRICT_NAME = 'Советский район, Томск'
district = ox.geocode_to_gdf(DISTRICT_NAME) # выгрузим данные по району

tags = {'building':True} # составим тег для зданий
# Выгрузим данные по зданиям только для выбранного района
buildings = ox.geometries_from_polygon (district.unary_union, tags)

# Визуализируем полученные здания
buildings.explore(tiles="CartoDB positron")

# Посмотрим на данные о зданиях
buildings.reset_index(inplace=True)
buildings.head()

# Визуализируем данные
map_tver = KeplerGl(height = 500)
map_tver.add_data(data = buildings.copy(), name = 'Здания Советского района')
map_tver.add_data(data = boundaries.copy(), name = 'Районы Томска')
map_tver.add_data(data = city.copy(), name = 'Границы Томска')
map_tver

